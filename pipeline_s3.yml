---
resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: "0.11.14"
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tags: latest-final
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:

- name: platform-automation-pivnet
  type: pivnet
  icon: cloud-download-outline
  source:
    api_token: ((pivnet-api-token))
    product_slug: platform-automation
    product_version: ((platform-automation-version))
    sort_by: semver

- name: env-state-gcp
  type: terraform
  icon: folder-google-drive
  source:
    backend_type: gcs
    backend_config:
      bucket: ((gcp.buckets.terraform))
      prefix: ((pas.env_name))
      credentials: ((gcp.gcp_service_account))
    vars:
      project: ((gcp.project))
      region: ((gcp.region))
      zones: ((gcp.zones))
      service_account_key: ((gcp.gcp_service_account))
      buckets_location: ((gcp.buckets_location))
      dns_suffix: ((gcp.parent_zone.dns_suffix))
      opsman_image_url: ""
      parent_managed_zone: ((gcp.parent_zone.name))
      email: ((pas.mysql_email))
      create_mesh_lb: ((pas.create_mesh_lb))
      create_tcp_router: ((pas.create_tcp_router))
      external_database: ((pas.external_database))

# buckets

- name: platform-automation-tasks
  type: gcs-resource
  icon: folder-google-drive
  source:
    bucket: ((gcp.buckets.pivnet_products))
    json_key: ((gcp.gcp_service_account))
    regexp: platform-automation-tasks-((platform-automation-version)).zip

- name: platform-automation-image
  type: gcs-resource
  icon: folder-google-drive
  source:
    bucket: ((gcp.buckets.pivnet_products))
    json_key: ((gcp.gcp_service_account))
    regexp: platform-automation-image-((platform-automation-version)).tgz

- name: opsman-image
  type: gcs-resource
  icon: folder-google-drive
  source:
    bucket: ((gcp.buckets.pivnet_products))
    json_key: ((gcp.gcp_service_account))
    regexp: \[ops-manager,(.*)\]ops-manager-gcp-(.*).yml

- name: pas-product
  type: gcs-resource
  icon: folder-google-drive
  source:
    bucket: ((gcp.buckets.pivnet_products))
    json_key: ((gcp.gcp_service_account))
    regexp: \[elastic-runtime,(.*)\]cf-(.*).pivotal

- name: stemcell-250
  type: gcs-resource
  icon: folder-google-drive
  source:
    bucket: ((gcp.buckets.pivnet_products))
    json_key: ((gcp.gcp_service_account))
    regexp: \[stemcells-ubuntu-xenial,(.*)\]light-bosh-stemcell-250.(.*)-google-kvm-ubuntu-xenial-go_agent.tgz #light-bosh-stemcell-170.51-google-kvm-ubuntu-xenial-go_agent.tgz

- name: installation
  type: gcs-resource
  icon: folder-google-drive
  source:
    bucket: ((gcp.buckets.installation))
    json_key: ((gcp.gcp_service_account))
    regexp: installation-((pas.env_name))-(.*).zip

# configurations
- name: pcf-automation-source
  type: git
  icon: github-circle
  source:
    private_key: ((github.repos.pcf-automation-source.private_key))
    uri: ((github.repos.pcf-automation-source.uri))
    branch: s3

- name: configuration
  type: git
  icon: github-circle
  source:
    private_key: ((github.repos.configuration.private_key))
    uri: ((github.repos.configuration.uri))
    branch: master
    paths: 
    - ((pas.env_name))/*

- name: state
  type: git
  icon: github-circle
  source:
    private_key: ((github.repos.state.private_key))
    uri: ((github.repos.state.uri))
    branch: master
    paths: 
    - ((pas.env_name))/*

- name: configuration-repo
  type: git
  icon: github-circle
  source:
    private_key: ((github.repos.configuration.private_key))
    uri: ((github.repos.configuration.uri))
    branch: master

- name: state-repo
  type: git
  icon: github-circle
  source:
    private_key: ((github.repos.state.private_key))
    uri: ((github.repos.state.uri))
    branch: master

# triggers used to have jobs do something in a timely manner

- name: one-time-trigger
  type: time
  icon: alarm-check
  source:
    interval: 999999h

jobs:

- name: bootstrap-configuration
  serial: true
  public: false
  plan:
  - aggregate:
    - get: one-time-trigger
      trigger: true
    - get: pcf-automation-source
    - get: configuration-repo
    - get: state-repo
  - task: add-new-templates
    input_mapping:
      config: configuration-repo
      state: state-repo
      pcf-automation: pcf-automation-source
    params:
      ENV_NAME: ((pas.env_name))
      GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@banck.net"
      GIT_AUTHOR_NAME: "PCF Automation Bot"
      COMMIT_MESSAGE: 'Update template files'
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine/git
      inputs:
        - name: config
        - name: state
        - name: pcf-automation
      outputs:
        - name: config-commit
        - name: state-commit
      run:
        path: /bin/sh
        args:
          - -c
          - |
              set -eux
              git config --global user.email "$GIT_AUTHOR_EMAIL"
              git config --global user.name "$GIT_AUTHOR_NAME"
              git clone config config-commit
              mkdir -p config-commit/$ENV_NAME
              cp -a pcf-automation/templates/* config-commit/$ENV_NAME
              cp -a pcf-automation/terraforming-gcp config-commit/$ENV_NAME
              cp -a pcf-automation/terraform_override_files config-commit/$ENV_NAME
              cd config-commit
              git add -A
              git diff-index --quiet HEAD || git commit -m "$COMMIT_MESSAGE"
              cd ..
              git clone state state-commit
              mkdir -p state-commit/$ENV_NAME/state
              touch state-commit/$ENV_NAME/state/state.yml
              cd state-commit
              git add -A
              git diff-index --quiet HEAD || git commit -m "Created empty state file"
  - put: configuration
    params:
      repository: config-commit
      merge: true
  - put: state
    params:
      repository: state-commit
      merge: true

- name: terraforming-gcp
  serial: true
  public: false
  plan:
  - get: configuration
    trigger: true
  - get: pcf-automation-source
    passed: [bootstrap-configuration]
  - put: env-state-gcp
    params:
      env_name: ((pas.env_name))
      terraform_source: configuration/((pas.env_name))/terraforming-gcp/terraforming-pas
      override_files:
        - configuration/((pas.env_name))/terraform_override_files/dns_override.tf
        - configuration/((pas.env_name))/terraform_override_files/acme_override.tf
        - configuration/((pas.env_name))/terraform_override_files/output_override.tf
      delete_on_failure: false


- name: fetch-platform-automation
  # We use the pivnet resource to bootstrap the pipeline,
  # and because this product is part of the pipeline, not the foundation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz

### FETCH JOBS
- name: fetch-opsman
  serial: true
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
      trigger: true
      passed: [terraforming-gcp]
    - get: pcf-automation-source
    - get: env-state-gcp
      passed: [terraforming-gcp]
  - &interpolate
    task: interpolate-config
    file: pcf-automation-source/tasks/interpolate.yml
    input_mapping:
      config: configuration
      terraform-output: env-state-gcp
    output_mapping:
      interpolated-config: configuration-interpolated
    params:
      ENV_NAME: ((pas.env_name))
      PIVNET_API_TOKEN: ((pivnet-api-token))
      GCP_AUTH_JSON: ((gcp.gcp_service_account))
      OM_USERNAME: ((opsman.username))
      OM_PASSWORD: ((opsman.password))
      OM_DECRYPTION_PASSPHRASE: ((opsman.decryption-passphrase))
      CLOUD_CONTROLLER_ENCRYPT_KEY: ((pas.cloud_controller_encrypt_key))
      MYSQL_EMAIL: ((pas.mysql_email))
      CREDHUB_KEY_ENCRYPTION_PASSWORD: ((pas.credhub_key_encryption_password))
      S3_BUCKET: ((s3.bucket))
      S3_ENDPOINT: ((s3.endpoint))
      S3_ACCESS_KEY_ID: ((s3.access_key_id))
      S3_SECRET_ACCESS_KEY: ((s3.secret_access_key))
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((pas.env_name))/download-product-configs/opsman.yml
      VARS_FILES: config/((pas.env_name))/download-product-configs/vars.yml
    input_mapping:
      config: configuration-interpolated
  - put: opsman-image
    params:
      file: downloaded-product/*

- name: fetch-pas
  serial: true
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
      trigger: true
      passed: [terraforming-gcp]
    - get: pcf-automation-source
    - get: env-state-gcp
      passed: [terraforming-gcp]
  - <<: *interpolate
  - task: download-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((pas.env_name))/download-product-configs/pas.yml
      VARS_FILES: config/((pas.env_name))/download-product-configs/vars.yml
    input_mapping:
      config: configuration-interpolated
  - aggregate:
    - put: pas-product
      params:
        file: downloaded-product/*.pivotal

- name: fetch-stemcell-250
  serial: true
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
      trigger: true
      passed: [terraforming-gcp]
    - get: pcf-automation-source
    - get: env-state-gcp
      passed: [terraforming-gcp]
  - <<: *interpolate
  - task: download-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((pas.env_name))/download-product-configs/stemcell-250.yml
      VARS_FILES: config/((pas.env_name))/download-product-configs/vars.yml
    input_mapping:
      config: configuration-interpolated
  - aggregate:
    - put: stemcell-250
      params:
        file: downloaded-product/*.tgz


# INSTALL JOBS

- name: install-opsman
  serial: true
  serial_groups: 
  - upgrade 
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: one-time-trigger
      trigger: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
      passed: [fetch-opsman]
    - get: state
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: ((pas.env_name))/download-product-configs/opsman.yml
      VARS_FILES: config/((pas.env_name))/download-product-configs/vars.yml
    input_mapping:
      config: configuration-interpolated
    output_mapping:
      downloaded-product: opsman-image
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-image
      state: state
      config: configuration-interpolated
    params:
      VARS_FILES: config/((pas.env_name))/config/opsman-vars.yml
      STATE_FILE: ((pas.env_name))/state/state.yml
      OPSMAN_CONFIG_FILE: ((pas.env_name))/config/opsman.yml
    ensure: &make-state-commit
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: state
            file-source: generated-state
          output_mapping:
            repository-commit: state-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((pas.env_name))/state/state.yml
            GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
            GIT_AUTHOR_NAME: "PCF Automation Bot"
            COMMIT_MESSAGE: 'Update state file'
        - put: state
          params:
            repository: state-commit
            merge: true
  - &skip_ssl
    task: skip_ssl_validation
    image: platform-automation-image
    input_mapping:
      env: configuration-interpolated
    output_mapping:
      env-modified: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
    config:
      platform: linux
      inputs:
        - name: env
      outputs:
        - name: env-modified
      run:
        path: /bin/sh
        args:
          - -c
          - |
              set -eux
              cp -a env/* env-modified
              printf '\n%s' "skip-ssl-validation: true" >> env-modified/$ENV_FILE
  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: configuration-interpolated
      config: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
      AUTH_CONFIG_FILE: ((pas.env_name))/config/auth.yml
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration-interpolated
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
      DIRECTOR_CONFIG_FILE: ((pas.env_name))/config/director.yml
      VARS_FILES: config/((pas.env_name))/config/director-vars.yml
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
  - task: update-ssl-certificate
    image: platform-automation-image
    file: pcf-automation-source/tasks/update-ssl-certificate.yml
    input_mapping:
      terraform-output: env-state-gcp
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
# UPGRADE

- name: export-installation
  serial: true
  serial_groups: 
  - upgrade 
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
      trigger: true
      passed:
      - fetch-opsman
    - get: pcf-automation-source
    - get: env-state-gcp
    - get: one-time-trigger
      passed:
      - install-opsman
  - <<: *interpolate
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
  - put: installation
    params:
      file: installation/*.zip

- name: upgrade-opsman
  serial: true
  serial_groups: 
  - upgrade 
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: opsman-image
    - get: configuration
      trigger: true
      passed: [ export-installation ]
    - get: installation
    - get: state
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - <<: *skip_ssl
  - task: upgrade-opsman
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      image: opsman-image
      state: state
      config: configuration-interpolated
      env: configuration-interpolated
      vars: configuration-interpolated
      installation: installation
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
      VARS_FILES: config/((pas.env_name))/config/opsman-vars.yml
      STATE_FILE: ((pas.env_name))/state/state.yml
      OPSMAN_CONFIG_FILE: ((pas.env_name))/config/opsman.yml
    ensure: *make-state-commit
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
  - task: update-ssl-certificate
    image: platform-automation-image
    file: pcf-automation-source/tasks/update-ssl-certificate.yml
    input_mapping:
      terraform-output: env-state-gcp
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml


- name: upload-stemcell-250
  serial: true
  serial_groups: 
  - upgrade 
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
      trigger: true
      passed: 
      - upgrade-opsman
      - fetch-stemcell-250
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - task: download-stemcell-250
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: ((pas.env_name))/download-product-configs/stemcell-250.yml
      VARS_FILES: config/((pas.env_name))/download-product-configs/vars.yml
    input_mapping:
      config: configuration-interpolated
    output_mapping:
      downloaded-product: stemcell-250
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: configuration-interpolated
      stemcell: stemcell-250
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml

- name: upload-stage-configure-pas
  serial: true
  serial_groups: 
  - upgrade 
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
      trigger: true
      passed: 
      - upload-stemcell-250
      - fetch-pas
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - task: download-pas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: ((pas.env_name))/download-product-configs/pas.yml
      VARS_FILES: config/((pas.env_name))/download-product-configs/vars.yml
    input_mapping:
      config: configuration-interpolated
    output_mapping:
      downloaded-product: pas-product
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pas-product
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pas-product
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration-interpolated
      env: configuration-interpolated
    params:
      CONFIG_FILE: ((pas.env_name))/config/cf.yml
      VARS_FILES: config/((pas.env_name))/config/cf-vars.yml
      ENV_FILE: ((pas.env_name))/env/env.yml


- name: apply-product-changes
  serial: true
  serial_groups: 
  - upgrade 
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
      trigger: true
      passed: [ upload-stage-configure-pas ]
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - task: apply-product-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml

# DESTROY

- name: destroy-installation
  serial: true
  public: false
  plan:
  - aggregate:
    - get: pcf-automation-source
      trigger: false
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: state
    - get: env-state-gcp
  - <<: *interpolate
  - task: delete-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-installation.yml
    input_mapping:
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
  - task: delete-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-vm.yml
    input_mapping:
      state: state
      config: configuration-interpolated
    params:
      VARS_FILES: config/((pas.env_name))/config/opsman-vars.yml
      STATE_FILE: ((pas.env_name))/state/state.yml
      OPSMAN_CONFIG_FILE: ((pas.env_name))/config/opsman.yml

- name: destroy-terraform
  serial: true
  public: false
  plan:
  - aggregate:
    - get: configuration
    - get: state
  - put: env-state-gcp
    params:
      terraform_source: configuration/((pas.env_name))/terraforming-gcp/terraforming-pas
      override_files:
        - configuration/((pas.env_name))/terraform_override_files/dns_override.tf
        - configuration/((pas.env_name))/terraform_override_files/acme_override.tf
        - configuration/((pas.env_name))/terraform_override_files/output_override.tf
      delete_on_failure: true
      env_name: ((pas.env_name))
      action: destroy
    get_params:
      action: destroy
  - task: delete-config
    input_mapping:
      config: configuration
      state: state
    params:
      ENV_NAME: ((pas.env_name))
      GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@banck.net"
      GIT_AUTHOR_NAME: "PCF Automation Bot"
      COMMIT_MESSAGE: 'Delete Environment'
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine/git
      inputs:
        - name: config
        - name: state
      outputs:
        - name: config-commit
        - name: state-commit
      run:
        path: /bin/sh
        args:
          - -c
          - |
              set -eux
              git config --global user.email "$GIT_AUTHOR_EMAIL"
              git config --global user.name "$GIT_AUTHOR_NAME"
              git clone config config-commit
              rm -rf config-commit/$ENV_NAME
              cd config-commit
              git add -A
              git diff-index --quiet HEAD || git commit -m "$COMMIT_MESSAGE"
              cd ..
              git clone state state-commit
              rm -rf state-commit/$ENV_NAME
              cd state-commit
              git add -A
              git diff-index --quiet HEAD || git commit -m "$COMMIT_MESSAGE"
  - put: configuration
    params:
      repository: config-commit
      merge: true
  - put: state
    params:
      repository: state-commit
      merge: true

groups:
- name: prepare
  jobs:
  - terraforming-gcp
  - bootstrap-configuration
  - fetch-platform-automation
- name: fetch
  jobs:
  - fetch-opsman
  - fetch-stemcell-250
  - fetch-pas

- name: install
  jobs:
  - install-opsman
- name: upgrade
  jobs:
  - export-installation
  - upgrade-opsman
  - upload-stemcell-250
  - upload-stage-configure-pas
  - apply-product-changes

- name: destroy
  jobs:
  - destroy-terraform
  - destroy-installation
